---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: cert-manager
  namespace: cert-manager
spec:
  chart:
    spec:
      chart: cert-manager
      interval: 10m0s
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: cert-manager
      version: 1.x.x
  dependsOn:
    # Do not deploy cert-manager until the kube-prometheus-stack is deployed.
    # The cert-manager chart deploys a ServiceMonitor, whose CRD is provided by
    # the kube-prometheus-stack. Therefore, the kube-prometheus-stack chart
    # must be deployed before cert-manager.
    - name: kube-prometheus-stack
      namespace: monitoring
  install:
    crds: Create
    createNamespace: true
  interval: 10m0s
  targetNamespace: cert-manager
  upgrade:
    crds: CreateReplace
  values:
    crds:
      # This option decides if the CRDs should be installed as part of the Helm
      # installation.
      enabled: true
      # This option makes it so that the "helm.sh/resource-policy": keep
      # annotation is added to the CRD. This will prevent Helm from
      # uninstalling the CRD when the Helm release is uninstalled.
      #
      # WARNING: when the CRDs are removed, all cert-manager custom resources
      # (Certificates, Issuers, ...) will be removed too by the garbage
      # collector.
      keep: true
    replicaCount: 1
    # Resources to provide to the cert-manager controller pod.
    resources:
      requests:
        cpu: 5m
        memory: 25Mi
      limits:
        cpu: 10m
        memory: 50Mi
    prometheus:
      # Enable Prometheus monitoring for the cert-manager controller and
      # webhook. If you use the Prometheus Operator, set
      # prometheus.podmonitor.enabled or prometheus.servicemonitor.enabled, to
      # create a PodMonitor or a ServiceMonitor resource. Otherwise,
      # 'prometheus.io' annotations are added to the cert-manager and
      # cert-manager-webhook Deployments.
      enabled: true
      servicemonitor:
        # Create a ServiceMonitor to add cert-manager to Prometheus.
        enabled: true
        # Specifies the `prometheus` label on the created ServiceMonitor. This
        # is used when different Prometheus instances have label selectors
        # matching different ServiceMonitors.
        prometheusInstance: default
        # The target port to set on the ServiceMonitor. This must match the
        # port that the cert-manager controller is listening on for metrics.
        targetPort: 9402
        # The path to scrape for metrics.
        path: /metrics
        # The interval to scrape metrics.
        interval: 60s
        # The timeout before a metrics scrape fails.
        scrapeTimeout: 30s
        # Additional labels to add to the ServiceMonitor.
        labels: {}
        # Additional annotations to add to the ServiceMonitor.
        annotations: {}
        # Keep labels from scraped data, overriding server-side labels.
        honorLabels: false
    webhook:
      # Number of replicas of the cert-manager webhook to run.
      #
      # The default is 1, but in production set this to 2 or 3 to provide high
      # availability.
      #
      # If `replicas > 1`, consider setting
      # `webhook.podDisruptionBudget.enabled=true`.
      replicaCount: 1
      # Resources to provide to the cert-manager webhook pod.
      resources:
        requests:
          cpu: 5m
          memory: 12Mi
        limits:
          cpu: 5m
          memory: 20Mi
      # Enables default network policies for webhooks.
      networkPolicy:
        # Create network policies for the webhooks.
        enabled: false
    cainjector:
      # Create the CA Injector deployment
      enabled: true
      # The number of replicas of the cert-manager cainjector to run.
      #
      # The default is 1, but in production set this to 2 or 3 to provide high
      # availability.
      #
      # If `replicas > 1`, consider setting
      # `cainjector.podDisruptionBudget.enabled=true`.
      #
      # Note that cert-manager uses leader election to ensure that there can
      # only be a single instance active at a time.
      replicaCount: 1
      # Resources to provide to the cert-manager cainjector pod.
      resources:
        requests:
          cpu: 5m
          memory: 25Mi
        limits:
          cpu: 5m
          memory: 50Mi
    # This startupapicheck is a Helm post-install hook that waits for the
    # webhook endpoints to become available.
    # The check is implemented using a Kubernetes Job - if you are injecting
    # mesh sidecar proxies into cert-manager pods, ensure that they are not
    # injected into this Job's pod. Otherwise, the installation may time out
    # owing to the Job never being completed because the sidecar proxy does not
    # exit.
    # For more information, see [this note](https://github.com/cert-manager/cert-manager/pull/4414).
    startupapicheck:
      # Enables the startup api check.
      enabled: true
      # Timeout for 'kubectl check api' command.
      timeout: 1m
      # Job backoffLimit
      backoffLimit: 4
      # Optional additional annotations to add to the startupapicheck Job.
      jobAnnotations:
        helm.sh/hook: post-install
        helm.sh/hook-weight: "1"
        helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      # Resources to provide to the cert-manager controller pod.
      #
      # For example:
      #  requests:
      #    cpu: 10m
      #    memory: 32Mi
      resources: {}
